name: Terraform PR Automation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container: hashicorp/terraform:1.5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan 2>&1 | tee plan.txt
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let plan = fs.readFileSync('plan.txt', 'utf8');
            
            // Truncate output if too large to prevent comment size limits
            const MAX_SIZE = 60000;
            let truncated = false;
            if (plan.length > MAX_SIZE) {
              plan = plan.substring(0, MAX_SIZE);
              truncated = true;
            }
            
            const output = `### Terraform Plan
            
            <details><summary>📄 Show Plan Output</summary>
            
            \`\`\`hcl
            ${plan}${truncated ? '\n\n... (output truncated due to size limit)' : ''}
            \`\`\`
            
            </details>
            
            *🤖 Automated by GitHub Actions*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-command:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && startsWith(github.event.comment.body, '/terraform')
    runs-on: ubuntu-latest
    container: hashicorp/terraform:1.5
    
    steps:
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              ref: pr.data.head.ref,
              sha: pr.data.head.sha
            };

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.pr.outputs.result).sha }}

      - name: Parse Command
        id: command
        run: |
          COMMENT="${{ github.event.comment.body }}"
          echo "Full comment: $COMMENT"
          
          if [[ "$COMMENT" == *"/terraform-apply"* ]]; then
            echo "action=apply" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT" == *"/terraform-plan"* ]]; then
            echo "action=plan" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT" == *"/terraform-fmt"* ]]; then
            echo "action=fmt" >> $GITHUB_OUTPUT
          else
            echo "action=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        if: steps.command.outputs.action != 'unknown'
        run: terraform init

      - name: Execute Terraform Command
        id: execute
        run: |
          case "${{ steps.command.outputs.action }}" in
            "plan")
              echo "🔍 Running Terraform Plan..."
              terraform plan -no-color 2>&1 | tee result.txt
              ;;
            "apply")
              echo "🚀 Running Terraform Apply..."
              terraform apply -auto-approve -no-color 2>&1 | tee result.txt
              ;;
            "fmt")
              echo "🎨 Running Terraform Format..."
              terraform fmt -recursive -write=true
              echo "Code formatted successfully!" > result.txt
              ;;
            *)
              echo "❌ Unknown command" > result.txt
              exit 1
              ;;
          esac

      - name: Comment Result
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const action = '${{ steps.command.outputs.action }}';
            const success = '${{ steps.execute.outcome }}' === 'success';
            
            let result = '';
            try {
              result = fs.readFileSync('result.txt', 'utf8');
            } catch (error) {
              result = 'No output available';
            }
            
            // Truncate output if too large to prevent comment size limits
            const MAX_SIZE = 60000;
            let truncated = false;
            if (result.length > MAX_SIZE) {
              result = result.substring(0, MAX_SIZE);
              truncated = true;
            }
            
            const emoji = {
              'plan': '📋',
              'apply': '🚀',
              'fmt': '🎨'
            };
            
            const actionName = {
              'plan': 'Plan',
              'apply': 'Apply',
              'fmt': 'Format'
            };
            
            const status = success ? '✅ Success' : '❌ Failed';
            
            const output = `#### ${emoji[action] || '🔧'} Terraform ${actionName[action] || 'Command'} ${status}
            
            <details><summary>📄 Show Output</summary>
            
            \`\`\`terraform
            ${result}${truncated ? '\n\n... (output truncated due to size limit)' : ''}
            \`\`\`
            
            </details>
            
            *🎯 Triggered by: @${{ github.event.comment.user.login }}*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
