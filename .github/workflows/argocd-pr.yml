name: ArgoCD PR Automation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  argocd-diff:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
        # Step 1: Checkout the PR branch from the repository
        - name: Checkout
          uses: actions/checkout@v4

        # Step 2: Install ArgoCD CLI
        - name: Install ArgoCD CLI
          run: |
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
            argocd version --client

        # Step 3: Login to ArgoCD (using server and credentials from secrets)
        - name: ArgoCD Login
          run: |
            echo "🔗 Connecting to ArgoCD server..."
            # Replace with your actual ArgoCD server URL
            argocd login ${{ secrets.ARGOCD_SERVER }} \
              --username ${{ secrets.ARGOCD_USERNAME }} \
              --password ${{ secrets.ARGOCD_PASSWORD }} \
              --insecure
          env:
            ARGOCD_OPTS: "--insecure"

        # Step 4: Run argocd app diff and save output to a file
        - name: ArgoCD App Diff
          id: diff
          run: |
            echo "🔍 Running ArgoCD App Diff..."
            argocd app diff nginx-app --local nginx-app 2>&1 | tee diff.txt
          continue-on-error: true

        # Step 5: Upload the diff output as an artifact
        - name: Upload Diff Artifact
          uses: actions/upload-artifact@v4
          with:
            name: argocd-diff-output
            path: diff.txt

        # Step 6: Comment on PR with diff output or artifact link
        - name: Comment PR with Diff or Artifact Link
          uses: actions/github-script@v7
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            script: |
              // Hebrew: קורא את הפלט של ה-diff, ואם הוא גדול מדי, שם קישור לארטיפקט
              // English: Reads the diff output, and if too large, posts a link to the artifact
              const fs = require('fs');
              const MAX_COMMENT_SIZE = 65000;
              let diff = '';
              try {
                diff = fs.readFileSync('diff.txt', 'utf8');
              } catch (e) {
                diff = 'No diff output found.';
              }
              
              let body = '';
              if (diff.length < MAX_COMMENT_SIZE) {
                body = `#### 👀 ArgoCD App Diff\n\n\`\`\`diff\n${diff}\n\`\`\``;
              } else {
                // Artifact download URL pattern: https://github.com/<owner>/<repo>/actions/runs/<run_id>
                const runId = process.env.GITHUB_RUN_ID;
                const repo = process.env.GITHUB_REPOSITORY;
                const artifactUrl = `https://github.com/${repo}/actions/runs/${runId}`;
                body = `#### 👀 ArgoCD App Diff\n\nDiff output is too large to display. [Download the diff artifact here](${artifactUrl})`;
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });

  argocd-command:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && startsWith(github.event.comment.body, '/argocd')
    runs-on: ubuntu-latest
    
    steps:
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            return {
              ref: pr.data.head.ref,
              sha: pr.data.head.sha
            };

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.pr.outputs.result).sha }}

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd

      - name: Parse Command
        id: command
        run: |
          COMMENT="${{ github.event.comment.body }}"
          echo "Full comment: $COMMENT"
          
          if [[ "$COMMENT" == *"/argocd-sync"* ]]; then
            echo "action=sync" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT" == *"/argocd-diff"* ]]; then
            echo "action=diff" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT" == *"/argocd-status"* ]]; then
            echo "action=status" >> $GITHUB_OUTPUT
          else
            echo "action=unknown" >> $GITHUB_OUTPUT
          fi

      - name: ArgoCD Login
        if: steps.command.outputs.action != 'unknown'
        run: |
          argocd login adf570a01b0f.ngrok-free.app:443 \
            --username admin \
            --password wz3RtQReq9LuIHQL \
            --insecure
        env:
          ARGOCD_OPTS: "--insecure"

      - name: Execute ArgoCD Command
        id: execute
        run: |
          case "${{ steps.command.outputs.action }}" in
            "diff")
              echo "🔍 Running ArgoCD App Diff..."
              argocd app diff nginx-app --local nginx-app 2>&1 | tee result.txt
              ;;
            "sync")
              echo "🚀 Running ArgoCD App Sync..."
              argocd app sync nginx-app 2>&1 | tee result.txt
              ;;
            "status")
              echo "📊 Getting ArgoCD App Status..."
              argocd app get nginx-app 2>&1 | tee result.txt
              ;;
            *)
              echo "❌ Unknown command" > result.txt
              exit 1
              ;;
          esac

      - name: Comment Result
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const action = '${{ steps.command.outputs.action }}';
            const success = '${{ steps.execute.outcome }}' === 'success';
            
            let result = '';
            try {
              result = fs.readFileSync('result.txt', 'utf8');
            } catch (error) {
              result = 'No output available';
            }
            
            const emoji = {
              'diff': '👀',
              'sync': '🚀',
              'status': '📊'
            };
            
            const actionName = {
              'diff': 'Diff',
              'sync': 'Sync',
              'status': 'Status'
            };
            
            const status = success ? '✅ Success' : '❌ Failed';
            
            const output = `#### ${emoji[action] || '🔧'} ArgoCD ${actionName[action] || 'Command'} ${status}
            
            \`\`\`diff
            ${result}
            \`\`\`
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
