name: Atlantis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  issue_comment:
    types: [created]

env:
  TF_VERSION: "1.5.0"

jobs:
  atlantis:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, 'atlantis'))
    
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Checkout PR branch if this is a PR comment
          ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}
          # Get full history for Atlantis
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        if: github.event_name == 'pull_request'
        run: |
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        run: |
          terraform init -backend=false
          terraform validate

      - name: Terraform Plan (on PR)
        if: github.event_name == 'pull_request'
        id: plan
        run: |
          terraform init
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan_output.txt
        continue-on-error: true

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('plan_output.txt', 'utf8');
            const output = `#### Terraform Plan üìñ
            
            \`\`\`hcl
            ${planOutput}
            \`\`\`
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Handle Atlantis Commands
        if: github.event_name == 'issue_comment' && contains(github.event.comment.body, 'atlantis')
        run: |
          echo "Processing Atlantis command: ${{ github.event.comment.body }}"
          
          # Extract the command
          COMMAND=$(echo "${{ github.event.comment.body }}" | grep -o 'atlantis [a-zA-Z]*' | head -1)
          echo "Extracted command: $COMMAND"
          
          # Initialize Terraform
          terraform init
          
          case "$COMMAND" in
            "atlantis plan")
              echo "Running terraform plan..."
              terraform plan -no-color > plan_result.txt 2>&1
              PLAN_EXIT_CODE=$?
              echo "PLAN_EXIT_CODE=$PLAN_EXIT_CODE" >> $GITHUB_ENV
              ;;
            "atlantis apply")
              echo "Running terraform apply..."
              terraform apply -auto-approve -no-color > apply_result.txt 2>&1
              APPLY_EXIT_CODE=$?
              echo "APPLY_EXIT_CODE=$APPLY_EXIT_CODE" >> $GITHUB_ENV
              ;;
            "atlantis help")
              echo "Available commands:" > help_result.txt
              echo "- atlantis plan: Run terraform plan" >> help_result.txt
              echo "- atlantis apply: Run terraform apply" >> help_result.txt
              echo "- atlantis help: Show this help" >> help_result.txt
              ;;
            *)
              echo "Unknown command: $COMMAND" > error_result.txt
              ;;
          esac

      - name: Comment with Command Results
        if: github.event_name == 'issue_comment' && contains(github.event.comment.body, 'atlantis')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const command = '${{ github.event.comment.body }}';
            let output = '';
            
            if (command.includes('atlantis plan')) {
              try {
                const planResult = fs.readFileSync('plan_result.txt', 'utf8');
                const exitCode = process.env.PLAN_EXIT_CODE || '0';
                const status = exitCode === '0' ? '‚úÖ Success' : '‚ùå Failed';
                
                output = `#### Terraform Plan Result ${status}
                
                <details><summary>Show Plan Output</summary>
                
                \`\`\`terraform
                ${planResult}
                \`\`\`
                
                </details>
                
                *Exit Code: ${exitCode}*`;
              } catch (error) {
                output = '‚ùå Failed to read plan results';
              }
            } else if (command.includes('atlantis apply')) {
              try {
                const applyResult = fs.readFileSync('apply_result.txt', 'utf8');
                const exitCode = process.env.APPLY_EXIT_CODE || '0';
                const status = exitCode === '0' ? '‚úÖ Success' : '‚ùå Failed';
                
                output = `#### Terraform Apply Result ${status}
                
                <details><summary>Show Apply Output</summary>
                
                \`\`\`terraform
                ${applyResult}
                \`\`\`
                
                </details>
                
                *Exit Code: ${exitCode}*`;
              } catch (error) {
                output = '‚ùå Failed to read apply results';
              }
            } else if (command.includes('atlantis help')) {
              try {
                const helpResult = fs.readFileSync('help_result.txt', 'utf8');
                output = `#### Atlantis Help üìö
                
                \`\`\`
                ${helpResult}
                \`\`\``;
              } catch (error) {
                output = '‚ùå Failed to read help';
              }
            } else {
              output = `#### Unknown Command ‚ùì
              
              Command \`${command}\` is not recognized.
              
              **Available commands:**
              - \`atlantis plan\`
              - \`atlantis apply\`
              - \`atlantis help\``;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply (on main branch)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Upload Terraform Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-artifacts-${{ github.run_number }}
          path: |
            *.txt
            *.tfplan
            terraform.tfstate*
          retention-days: 30
